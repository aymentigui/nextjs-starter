// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  // directUrl = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
}

model user {
  id                               String                     @id @default(cuid())
  firstname                        String?
  lastname                         String?
  username                         String?                    @unique
  email                            String?                    @unique
  email_verified                   DateTime?
  password                         String
  image                            String?
  image_compressed                 String?
  is_two_factor_enabled            Boolean?                   @default(false)
  two_factor_confermation_code     twofactorconfermation?
  reset_password_confermation_code resetpasswordconfermation?
  // accounts                      Account[]
  sessions                         session[]
  roles                            userrole[]
  is_admin                         Boolean                    @default(false)
  public                           Boolean                    @default(true)
  failed_login_attempts            Int                        @default(0)
  locked_until                     DateTime?
  verification_attempts            Int                        @default(0)
  last_verification_attempt        DateTime?
  verification_blocked_until       DateTime?
  two_factor_attempts              Int                        @default(0)
  last_two_factor_attempt          DateTime?
  two_factor_blocked_until         DateTime?
  // Optional for WebAuthn support
  // Authenticator                 Authenticator[]

  created_at DateTime  @default(now())
  deleted_at DateTime?
  updated_at DateTime  @updatedAt
}

model session {
  id            String   @id @default(cuid())
  session_token String
  user_id       String
  expires       DateTime
  user          user     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  device_name   String?
  device_type   String?
  browser       String?
  os            String?
  active        Boolean  @default(true)
  created_at    DateTime @default(now())
}

model role {
  id          String     @id @default(cuid())
  name        String     @unique
  permissions String
  users       userrole[]
  public      Boolean    @default(true)
}

model userrole {
  id      String @id @default(cuid())
  user    user   @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id String
  role    role   @relation(fields: [role_id], references: [id], onDelete: Cascade)
  role_id String
}

model verificationtoken {
  id         String   @id @default(cuid())
  email      String
  token      String
  expired_at DateTime
}

model twofactorconfermation {
  id         String   @id @default(cuid())
  user_id    String
  expired_at DateTime
  user       user     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([user_id])
}

model resetpasswordconfermation {
  id            String    @id @default(cuid())
  user_id       String
  expired_at    DateTime
  attempts      Int       @default(0) // Nombre de tentatives
  last_attempt  DateTime  @default(now()) // Dernière tentative
  blocked_until DateTime? // Bloqué jusqu'à cette date
  user          user      @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([user_id])
}

// model Account {
//   id                       String  @id @default(cuid())
//   userId                   String  @unique
//   type                     String
//   provider                 String
//   providerAccountId        String
//   refresh_token            String? @db.Text
//   access_token             String? @db.Text
//   expires_at               Int?
//   token_type               String?
//   scope                    String?
//   id_token                 String? @db.Text
//   session_state            String?
//   refresh_token_expires_in Int?
//   user                     User?   @relation(fields: [userId], references: [id])

//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   @@unique([provider, providerAccountId])
//   @@index([userId])
// }

// Optional for WebAuthn support
// model Authenticator {
//   credentialID         String  @unique
//   userId               String
//   providerAccountId    String
//   credentialPublicKey  String
//   counter              Int
//   credentialDeviceType String
//   credentialBackedUp   Boolean
//   transports           String?

//   user User @relation(fields: [userId], references: [id], onDelete: Cascade)

//   @@id([userId, credentialID])
// }

model files {
  id         String    @id @default(cuid())
  name       String
  mime_type  String
  extention  String
  size       Int
  path       String
  created_at DateTime  @default(now())
  deleted_at DateTime?
  added_from String?

  can_view_permissions     String?
  can_download_permissions String?
  can_delete_permissions   String?

  // Définition des permissions spécifiques aux utilisateurs
  can_view_users     String?
  can_download_users String?
  can_delete_users   String?

  // Indicateur si seul l'admin a le contrôle total
  admin_view_only     Boolean @default(false)
  admin_download_only Boolean @default(false)
  admin_delete_only   Boolean @default(false)
}
